//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'model_screen_configuration.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelScreenConfiguration extends _ModelScreenConfiguration {
  //
  //
  //

  static const CLASS_NAME = 'ModelScreenConfiguration';

  @override
  String get $className => CLASS_NAME;

  final Map<dynamic, dynamic>? args;
  final bool? isAccessibleOnlyIfLoggedInAndVerified;
  final bool? isAccessibleOnlyIfLoggedIn;
  final bool? isAccessibleOnlyIfLoggedOut;
  final bool? isRedirectable;
  final String? path;
  final ModelScreenConfiguration? prevConfiguration;
  final String? title;

  //
  //
  //

  const ModelScreenConfiguration({
    this.args,
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.path,
    this.prevConfiguration,
    this.title,
  });

  const ModelScreenConfiguration.c2({
    this.args,
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.path,
    this.prevConfiguration,
    this.title,
  });

  factory ModelScreenConfiguration.c3({
    Map<dynamic, dynamic>? args,
    bool? isAccessibleOnlyIfLoggedInAndVerified,
    bool? isAccessibleOnlyIfLoggedIn,
    bool? isAccessibleOnlyIfLoggedOut,
    bool? isRedirectable,
    String? path,
    ModelScreenConfiguration? prevConfiguration,
    String? title,
  }) {
    return ModelScreenConfiguration(
      args: args,
      isAccessibleOnlyIfLoggedInAndVerified:
          isAccessibleOnlyIfLoggedInAndVerified,
      isAccessibleOnlyIfLoggedIn: isAccessibleOnlyIfLoggedIn,
      isAccessibleOnlyIfLoggedOut: isAccessibleOnlyIfLoggedOut,
      isRedirectable: isRedirectable,
      path: path,
      prevConfiguration: prevConfiguration,
      title: title,
    );
  }

  factory ModelScreenConfiguration.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.from: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelScreenConfiguration? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelScreenConfiguration.of(
    ModelScreenConfiguration other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.of: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelScreenConfiguration? ofOrNull(
    ModelScreenConfiguration? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelScreenConfiguration.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelScreenConfiguration? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return ModelScreenConfiguration.fromJson(decoded);
      } else {
        return const ModelScreenConfiguration.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelScreenConfiguration.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.fromJson: $e');
      rethrow;
    }
  }

  static ModelScreenConfiguration? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final args = letMapOrNull<dynamic, dynamic>(otherData?['args'])
          ?.map(
            (p0, p1) => MapEntry(
              p0,
              p1,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final isAccessibleOnlyIfLoggedInAndVerified = letAsOrNull<bool>(
          otherData?['isAccessibleOnlyIfLoggedInAndVerified']);
      final isAccessibleOnlyIfLoggedIn =
          letAsOrNull<bool>(otherData?['isAccessibleOnlyIfLoggedIn']);
      final isAccessibleOnlyIfLoggedOut =
          letAsOrNull<bool>(otherData?['isAccessibleOnlyIfLoggedOut']);
      final isRedirectable = letAsOrNull<bool>(otherData?['isRedirectable']);
      final path = otherData?['path']?.toString().trim().nullIfEmpty;
      final prevConfiguration = () {
        final a =
            letMapOrNull<String, dynamic>(otherData?['prevConfiguration']);
        return a != null ? ModelScreenConfiguration.fromJson(a) : null;
      }();
      final title = otherData?['title']?.toString().trim().nullIfEmpty;
      return ModelScreenConfiguration(
        args: args,
        isAccessibleOnlyIfLoggedInAndVerified:
            isAccessibleOnlyIfLoggedInAndVerified,
        isAccessibleOnlyIfLoggedIn: isAccessibleOnlyIfLoggedIn,
        isAccessibleOnlyIfLoggedOut: isAccessibleOnlyIfLoggedOut,
        isRedirectable: isRedirectable,
        path: path,
        prevConfiguration: prevConfiguration,
        title: title,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelScreenConfiguration.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.fromUri: $e');
      rethrow;
    }
  }

  static ModelScreenConfiguration? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelScreenConfiguration.fromJson(uri.queryParameters);
      } else {
        return const ModelScreenConfiguration.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final args0 = args
          ?.map(
            (p0, p1) => MapEntry(
              p0,
              p1,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final isAccessibleOnlyIfLoggedInAndVerified0 =
          isAccessibleOnlyIfLoggedInAndVerified;
      final isAccessibleOnlyIfLoggedIn0 = isAccessibleOnlyIfLoggedIn;
      final isAccessibleOnlyIfLoggedOut0 = isAccessibleOnlyIfLoggedOut;
      final isRedirectable0 = isRedirectable;
      final path0 = path?.trim().nullIfEmpty;
      final prevConfiguration0 = prevConfiguration?.toJson();
      final title0 = title?.trim().nullIfEmpty;
      final withNulls = {
        'title': title0,
        'prevConfiguration': prevConfiguration0,
        'path': path0,
        'isRedirectable': isRedirectable0,
        'isAccessibleOnlyIfLoggedOut': isAccessibleOnlyIfLoggedOut0,
        'isAccessibleOnlyIfLoggedInAndVerified':
            isAccessibleOnlyIfLoggedInAndVerified0,
        'isAccessibleOnlyIfLoggedIn': isAccessibleOnlyIfLoggedIn0,
        'args': args0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelScreenConfiguration.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelScreenConfiguration mergeWith(
    BaseModel? other, {
    bool deepMerge = false,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return ModelScreenConfiguration.fromJson(data.cast());
  }

  //
  //
  //

  ModelScreenConfiguration copyWith({
    Map<dynamic, dynamic>? args,
    bool? isAccessibleOnlyIfLoggedInAndVerified,
    bool? isAccessibleOnlyIfLoggedIn,
    bool? isAccessibleOnlyIfLoggedOut,
    bool? isRedirectable,
    String? path,
    ModelScreenConfiguration? prevConfiguration,
    String? title,
  }) {
    return ModelScreenConfiguration.c2(
      args: args ?? this.args,
      isAccessibleOnlyIfLoggedInAndVerified:
          isAccessibleOnlyIfLoggedInAndVerified ??
              this.isAccessibleOnlyIfLoggedInAndVerified,
      isAccessibleOnlyIfLoggedIn:
          isAccessibleOnlyIfLoggedIn ?? this.isAccessibleOnlyIfLoggedIn,
      isAccessibleOnlyIfLoggedOut:
          isAccessibleOnlyIfLoggedOut ?? this.isAccessibleOnlyIfLoggedOut,
      isRedirectable: isRedirectable ?? this.isRedirectable,
      path: path ?? this.path,
      prevConfiguration: prevConfiguration ?? this.prevConfiguration,
      title: title ?? this.title,
    );
  }

  //
  //
  //

  ModelScreenConfiguration copyWithout({
    bool args = true,
    bool isAccessibleOnlyIfLoggedInAndVerified = true,
    bool isAccessibleOnlyIfLoggedIn = true,
    bool isAccessibleOnlyIfLoggedOut = true,
    bool isRedirectable = true,
    bool path = true,
    bool prevConfiguration = true,
    bool title = true,
  }) {
    return ModelScreenConfiguration.c2(
      args: args ? this.args : null,
      isAccessibleOnlyIfLoggedInAndVerified:
          isAccessibleOnlyIfLoggedInAndVerified
              ? this.isAccessibleOnlyIfLoggedInAndVerified
              : null,
      isAccessibleOnlyIfLoggedIn:
          isAccessibleOnlyIfLoggedIn ? this.isAccessibleOnlyIfLoggedIn : null,
      isAccessibleOnlyIfLoggedOut:
          isAccessibleOnlyIfLoggedOut ? this.isAccessibleOnlyIfLoggedOut : null,
      isRedirectable: isRedirectable ? this.isRedirectable : null,
      path: path ? this.path : null,
      prevConfiguration: prevConfiguration ? this.prevConfiguration : null,
      title: title ? this.title : null,
    );
  }

  //
  //
  //

  // args.
  @pragma('vm:prefer-inline')
  Map<dynamic, dynamic>? get argsField => this.args;

  // isAccessibleOnlyIfLoggedInAndVerified.
  @pragma('vm:prefer-inline')
  bool? get isAccessibleOnlyIfLoggedInAndVerifiedField =>
      this.isAccessibleOnlyIfLoggedInAndVerified;

  // isAccessibleOnlyIfLoggedIn.
  @pragma('vm:prefer-inline')
  bool? get isAccessibleOnlyIfLoggedInField => this.isAccessibleOnlyIfLoggedIn;

  // isAccessibleOnlyIfLoggedOut.
  @pragma('vm:prefer-inline')
  bool? get isAccessibleOnlyIfLoggedOutField =>
      this.isAccessibleOnlyIfLoggedOut;

  // isRedirectable.
  @pragma('vm:prefer-inline')
  bool? get isRedirectableField => this.isRedirectable;

  // path.
  @pragma('vm:prefer-inline')
  String? get pathField => this.path;

  // prevConfiguration.
  @pragma('vm:prefer-inline')
  ModelScreenConfiguration? get prevConfigurationField =>
      this.prevConfiguration;

  // title.
  @pragma('vm:prefer-inline')
  String? get titleField => this.title;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract final class ModelScreenConfigurationFieldNames {
  static const args = 'args';
  static const isAccessibleOnlyIfLoggedInAndVerified =
      'isAccessibleOnlyIfLoggedInAndVerified';
  static const isAccessibleOnlyIfLoggedIn = 'isAccessibleOnlyIfLoggedIn';
  static const isAccessibleOnlyIfLoggedOut = 'isAccessibleOnlyIfLoggedOut';
  static const isRedirectable = 'isRedirectable';
  static const path = 'path';
  static const prevConfiguration = 'prevConfiguration';
  static const title = 'title';
}
